import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public' }
        maven { url = 'https://maven.outlands.top/releases' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.99.+', changing: true
        //classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'scala'
//apply plugin: 'curseforge'


group = "mrtjp"
archivesBaseName = "MrTJPCore"

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    //Referred to as 'config' or 'project.config'
    project.ext.config = new ConfigSlurper().parse prop
}

configurations {
    deployerJars
}

repositories {
    maven {
        name "chickenbones"
        url "https://chickenbones.net/maven/"
    }
    maven {
        name 'Cleanroom Maven'
        url 'https://maven.cleanroommc.com/'
    }
    maven {
        url "https://repo.cleanroommc.com/snapshots"
    }
    maven {
        url "https://maven.outlands.top/releases/"
    }
    maven {
        url "https://jitpack.io/"
    }
    mavenCentral()
}

ext {
    lwjglLibraries = [
            [
                    'lwjgl3-glfw', 'lwjgl3-jemalloc', 'lwjgl3-openal',
                    'lwjgl3-opengl', 'lwjgl3-stb', 'lwjgl3-tinyfd', 'lwjgl3'
            ],

            [
                    'natives-linux-arm64', 'natives-linux-arm32', 'natives-linux',
                    'natives-macos-arm64', 'natives-macos',
                    'natives-windows-arm64', 'natives-windows-x86', 'natives-windows'
            ]
    ]
    lwjglArch = 'natives-linux'
}


dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"
    compileOnly "codechicken:CodeChickenLib:${config.mc_version}-${config.ccl_version}:deobf"
    minecraft ("com.cleanroommc:cleanroom:15.24.0.3009") {
        exclude group: 'org.lwjgl.lwjgl'
    }
    lwjglLibraries[0].each {
        lwjglLibraries[1].each { arch ->
            runtimeOnly "org.lwjgl3:$it:3.3.2-22-CLEANROOM:$lwjglArch"
        }
    }
    testImplementation 'junit:junit:4.13.1'
    compileOnly 'junit:junit:4.13.2'
}

def build_number = project.hasProperty("manualbuildnum") ? project.manualbuildnum : (System.getenv("BUILD_NUMBER") ?: "1")
version = "${project.config.mod_version}." + build_number
println "Starting build for $archivesBaseName $version for MC $config.mc_version-$config.forge_version"

minecraft {

    mappings channel: "stable", version: "39-1.12"

    //accessTransformer = file('src/main/resources/ccl_at.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

        }

        server {
            workingDirectory project.file('run/server')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets {
    main {
        def root = project.projectDir
        scala {
            srcDir new File(root, "src")
        }
        resources {
            srcDir new File(root, "resources")
        }
    }
}

processResources {
    duplicatesStrategy=DuplicatesStrategy.EXCLUDE

    //redo task if any of these properties change
    inputs.property "version", project.version
    inputs.property "mc.version", config.mc_version

    // Replace properties in all files
    from(sourceSets.main.resources.srcDirs) {
        include '**.info'
        expand  'mod_version': version, 'mc_version': config.mc_version,
                'forge_version': config.forge_version,
                'ccl_version': config.ccl_version.replace(".+", "")
        filter(ReplaceTokens, tokens: [
                'VERSION'      : config.mod_version,
                'BUILD_NUMBER' : build_number,
                'MC_VERSION'   : config.mc_version,
                'FORGE_VERSION': config.forge_version,
                'CCL_VERSION'  : config.ccl_version
        ])
    }
    // Copy everything else
    from(sourceSets.main.resources.srcDirs) {
        include 'assets/**/*.*'
    }
}



// Enable experimental features for scala compiler
tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = ["-Xexperimental"]
    scalaCompileOptions.setDeprecation false
}


/*if (project.hasProperty('curseapi')) {
    curse {
        projectId = '229002'
        apiKey = project.curseapi
        releaseType = 'release'

        additionalArtifact deobfJar
        additionalArtifact sourceJar
    }
}*/
